'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

let Promise = require('rsvp').Promise;
let asp = require('rsvp').denodeify;
let fs = require('graceful-fs');
let path = require('path');
let gutil = require('gulp-util');
let chokidar = require('chokidar');
let pathUtil = require('path');
var spawn = require('child_process').spawn;
var jspmLocal = require('gulp-jspm-local');

let dependencyPath = 'jspm_packages/local';

let getPackageObjectAsync = function () {
	var ref = _asyncToGenerator(function* (repo) {
		let packageFile = path.resolve('..', repo + '/package.json');

		try {
			let lookupJSON = yield asp(fs.readFile)(packageFile);
			return JSON.parse(lookupJSON.toString());
		} catch (e) {
			if (e.code == 'ENOENT' || e instanceof SyntaxError) return { notfound: true };
			throw e;
		}
	});

	return function getPackageObjectAsync(_x) {
		return ref.apply(this, arguments);
	};
}();

let watchProject = function () {
	var ref = _asyncToGenerator(function* (path, reload) {
		let packageName = path.substring(0, path.indexOf('@'));
		gutil.log("Starting watch for package", gutil.colors.yellow(packageName));

		let project = yield getPackageObjectAsync(packageName);
		let projectPath = '../' + packageName;

		let files = [];
		if (project.files !== undefined && project.files.length == 0) {
			gutil.log("\t", project.files.length, "file(s) defined.");
			files = project.files;
		} else {
			gutil.log("\tNo files defined in package.json. All files are included.");
		}

		if (project.directories.lib !== undefined) {
			gutil.log(`\tLib path '${ project.directories.lib }' found.`);
			executeGulp(projectPath, ["watch"]);
			projectPath += '/' + project.directories.lib;
		} else {
			gutil.log("\tNo lib path found. Loading from root.");
		}
		projectPath = pathUtil.resolve(projectPath);
		chokidar.watch(`${ projectPath }/**/*`, { persistent: true, awaitWriteFinish: true, ignoreInitial: true }).on('all', (() => {
			var ref = _asyncToGenerator(function* (event, path) {
				try {
					gutil.log("Dependent pacakge ", gutil.colors.yellow(packageName), "changed. Updating dependencies.");
					yield jspmLocal.updateLocalDependencies([packageName]);
					gutil.log(gutil.colors.yellow("Reloading browser..."));
					reload();
				} catch (e) {
					gutil.log(e);
				}
			}),
			    _this = this;

			return function (_x4, _x5) {
				return ref.apply(_this, arguments);
			};
		})());
	});

	return function watchProject(_x2, _x3) {
		return ref.apply(this, arguments);
	};
}();

function executeGulp(packagePath, tasks) {
	var isWin = /^win/.test(process.platform);
	var gulpPath = pathUtil.join(packagePath, 'node_modules', '.bin');
	gutil.log("Using gulp from " + gulpPath);
	if (isWin) {
		process.env.Path += ';' + gulpPath;
	} else {
		process.env.PATH += ':' + gulpPath;
	}
	gutil.log(`Processing ${ packagePath }`);
	var command = 'gulp';
	let gulpFile = pathUtil.join(packagePath, "gulpfile.js");
	var args = ['--gulpfile=' + gulpFile].concat(tasks);

	var opts = {
		cwd: packagePath,
		env: process.env,
		stdio: 'inherit',
		stderr: 'inherit'
	};

	if (isWin) {
		command = 'cmd';
		args = ['/s', '/c', 'gulp.cmd'].concat(args);

		opts.windowsVerbatimArguments = true;
	}

	let gulpGulp = spawn(command, args, opts);

	gulpGulp.on('close', function (code) {
		var error;

		if (code && 65 !== code) {
			error = new gutil.PluginError("gulp-overwatch", `${ gulpFile }: returned ${ code }`);
			gutil.log(`${ gulpFile }: returned ${ code }`);
		}
	});
}

function isDirectory(fileName) {
	let filePath = path.resolve(dependencyPath, fileName);
	return fs.lstatSync(filePath).isDirectory();
}

let watchProjects = exports.watchProjects = function () {
	var ref = _asyncToGenerator(function* (reload) {
		gutil.log("Watching local dependencies");
		let files = yield asp(fs.readdir)(dependencyPath);
		yield Promise.all(files.filter(isDirectory).map(function (p) {
			return watchProject(p, reload);
		}));
	});

	return function watchProjects(_x6) {
		return ref.apply(this, arguments);
	};
}();
//# sourceMappingURL=data:application/json;base64,
